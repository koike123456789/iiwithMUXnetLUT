// ./include/parser/blif_parser.h generated by reflex 3.0.7 from ./src/parser/blif_parser.l

#ifndef bl_REFLEX___INCLUDE_PARSER_BLIF_PARSER_H
#define bl_REFLEX___INCLUDE_PARSER_BLIF_PARSER_H
#define bl_IN_HEADER 1
#define REFLEX_VERSION "3.0.7"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_prefix

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         "./include/parser/blif_parser.h"
#define REFLEX_OPTION_lex                 bl_lex
#define REFLEX_OPTION_lexer               BL_LEXER
#define REFLEX_OPTION_namespace           blifparser
#define REFLEX_OPTION_outfile             "./src/parser/blif_parser.cpp"
#define REFLEX_OPTION_prefix              bl_

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 12 "./src/parser/blif_parser.l"

#include "circuit.h"
using namespace nodecircuit;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace blifparser {

class BL_LEXER : public reflex::AbstractLexer<reflex::Matcher> {
#line 17 "./src/parser/blif_parser.l"

Node* current_node;
NodeVector cur_nodes;
int mode;
virtual int wrap() { return 1; }
public:
Circuit* circuit;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  BL_LEXER(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
#line 26 "./src/parser/blif_parser.l"

circuit = NULL;
current_node = NULL;
mode = 255; // 128:start 129:output 130:input 131:gate 132:value 133:latchi 134:latcho 254:nothing 255:finish

  }
  static const int INITIAL = 0;
  virtual int bl_lex(void);
  int bl_lex(const reflex::Input& input)
  {
    in(input);
    return bl_lex();
  }
  int bl_lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return bl_lex();
  }
};

} // namespace blifparser

#endif
